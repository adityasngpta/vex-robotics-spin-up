{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT12, GearSetting.RATIO_6_1, True)\nleft_motor_b = Motor(Ports.PORT19, GearSetting.RATIO_6_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_6_1, False)\nright_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_6_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 299.24, 295, 40, MM, 1.5)\nCata = Motor(Ports.PORT6, GearSetting.RATIO_18_1, False)\nIntake = Motor(Ports.PORT18, GearSetting.RATIO_6_1, True)\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ncontroller_1_right_shoulder_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3\n            # right = axis2\n            drivetrain_left_side_speed = controller_1.axis3.position()\n            drivetrain_right_side_speed = controller_1.axis2.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonL1/buttonL2 status\n            # to control Intake\n            if controller_1.buttonL1.pressing():\n                Intake.spin(FORWARD)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif controller_1.buttonL2.pressing():\n                Intake.spin(REVERSE)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif not controller_1_left_shoulder_control_motors_stopped:\n                Intake.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_left_shoulder_control_motors_stopped = True\n            # check the buttonR1/buttonR2 status\n            # to control Cata\n            if controller_1.buttonR1.pressing():\n                Cata.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR2.pressing():\n                Cata.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                Cata.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\nautonChoose = True\nautonChoose2 = True\nchoseAuton = \"none\"\n\ndef when_started1():\n    global autonChoose, autonChoose2, chosenAuton\n\n    drivetrain.set_drive_velocity(200, PERCENT)\n    drivetrain.set_stopping(COAST)\n    Intake.set_stopping(COAST)\n    Intake.set_velocity(300, PERCENT)\n    Cata.set_stopping(HOLD)\n    Cata.set_velocity(60, PERCENT)\n    Cata.set_position(0, DEGREES)\n    #Cata.spin_for(REVERSE, 615, DEGREES, wait=True)\n\n    controller_1.screen.clear_screen()\n    controller_1.screen.set_cursor(1, 1)\n    controller_1.screen.print(\"Left = Left side auton\")\n    controller_1.screen.next_row()\n    controller_1.screen.print(\"Right = Right side auton\")\n    controller_1.screen.next_row()\n    controller_1.screen.print(\"Up = No auton\")\n\n    while autonChoose2 == False:\n\n        if autonChoose == False:\n\n            if controller_1.buttonLeft.pressing():\n                controller_1.screen.clear_screen()\n                controller_1.screen.set_cursor(1, 1)\n                controller_1.screen.print(\"Left side auton\")\n                controller_1.screen.next_row()\n                controller_1.screen.print(\"Left = No disk\")\n                controller_1.screen.next_row()\n                controller_1.screen.print(\"Right = Disk\")\n                autonChoose = True\n                chosenAuton = \"Left\"\n                wait(1, SECONDS)\n\n            elif controller_1.buttonRight.pressing():\n                controller_1.screen.clear_screen()\n                controller_1.screen.set_cursor(1, 1)\n                controller_1.screen.print(\"Right side auton\")\n                controller_1.screen.next_row()\n                controller_1.screen.print(\"Left = No disk\")\n                controller_1.screen.next_row()\n                controller_1.screen.print(\"Right = Disk\")\n                autonChoose = True\n                chosenAuton = \"Right\"\n                wait(1, SECONDS)\n            \n            elif controller_1.buttonUp.pressing():\n                controller_1.screen.clear_screen()\n                controller_1.screen.set_cursor(1, 1)\n                controller_1.screen.print(\"No auton\")\n                controller_1.screen.next_row()\n                controller_1.screen.print(\"Auton selection done\")\n                autonChoose = True\n                autonChoose2 = True\n                chosenAuton = \"none\"\n                wait(1, SECONDS)\n        \n        elif autonChoose == True:\n            \n            if chosenAuton == \"Left\":\n                \n                if controller_1.buttonLeft.pressing():\n                    controller_1.screen.clear_screen()\n                    controller_1.screen.set_cursor(1, 1)\n                    controller_1.screen.print(\"Left no disk\")\n                    controller_1.screen.next_row()\n                    controller_1.screen.print(\"Auton selection done\")\n                    autonChoose2 = True\n                    chosenAuton = \"LeftNoDisk\"\n\n                elif controller_1.buttonRight.pressing():\n                    controller_1.screen.clear_screen()\n                    controller_1.screen.set_cursor(1, 1)\n                    controller_1.screen.print(\"Left with disk\")\n                    controller_1.screen.next_row()\n                    controller_1.screen.print(\"Auton selection done\")\n                    autonChoose2 = True\n                    chosenAuton = \"LeftDisk\"\n            \n            elif chosenAuton == \"Right\":\n\n                if controller_1.buttonLeft.pressing():\n                    controller_1.screen.clear_screen()\n                    controller_1.screen.set_cursor(1, 1)\n                    controller_1.screen.print(\"Right no disk\")\n                    controller_1.screen.next_row()\n                    controller_1.screen.print(\"Auton selection done\")\n                    autonChoose2 = True\n                    chosenAuton = \"RightNoDisk\"\n\n                elif controller_1.buttonRight.pressing():\n                    controller_1.screen.clear_screen()\n                    controller_1.screen.set_cursor(1, 1)\n                    controller_1.screen.print(\"Right with disk\")\n                    controller_1.screen.next_row()\n                    controller_1.screen.print(\"Auton selection done\")\n                    autonChoose2 = True\n                    chosenAuton = \"RightDisk\"\n\n\n            \n\n    \n\ndef onevent_controller_1buttonX_pressed_0():\n    Cata.spin_for(REVERSE, 1078, DEGREES, wait=True)\n\ndef driver_control():\n    drivetrain.set_drive_velocity(200, PERCENT)\n    drivetrain.set_stopping(COAST)\n    Intake.set_stopping(COAST)\n    Intake.set_velocity(300, PERCENT)\n    Cata.set_stopping(HOLD)\n    Cata.set_velocity(60, PERCENT)\n\ndef autonomous():\n    chosenAuton = \"none\"\n    drivetrain.set_drive_velocity(25, PERCENT)\n    drivetrain.set_turn_velocity(25, PERCENT)\n\n    if chosenAuton == \"LeftNoDisk\":\n        Intake.spin_for(REVERSE, 30, DEGREES, wait=False)\n        drivetrain.drive_for(FORWARD, 2, INCHES, wait=True)\n\n    if chosenAuton == \"LeftDisk\":\n        Intake.spin_for(REVERSE, 30, DEGREES, wait=False)\n        drivetrain.drive_for(FORWARD, 2, INCHES, wait=True)\n        drivetrain.drive_for(REVERSE, 10, INCHES, wait=True)\n        drivetrain.turn_for(LEFT, 100, DEGREES, wait=True)\n        drivetrain.drive_for(FORWARD, 60, INCHES, wait=True)\n\n    drivetrain.set_drive_velocity(25, PERCENT)\n    drivetrain.set_turn_velocity(25, PERCENT)\n    drivetrain.drive_for(FORWARD, 72, INCHES, wait=True)\n    wait(1, SECONDS)\n    drivetrain.turn_for(RIGHT, 200, DEGREES, wait=True)\n    wait(1, SECONDS)\n    Intake.set_velocity(50, PERCENT)\n    Intake.spin_for(REVERSE, 5000, DEGREES, wait=False)\n    wait(0.1, SECONDS)\n    drivetrain.drive_for(FORWARD, 11, INCHES, wait=True)\n    drivetrain.drive_for(REVERSE, 10, INCHES, wait=True)\n\n    if chosenAuton == \"RightDisk\":\n        drivetrain.drive_for(FORWARD, 48, INCHES, wait=True)\n        drivetrain.turn_for(RIGHT, 90, DEGREES, wait=True)\n        Intake.spin_for(REVERSE, 20, DEGREES, wait=False)\n        drivetrain.drive_for(FORWARD, 5, INCHES, wait=True)\n        drivetrain.drive_for(REVERSE, 10, INCHES, wait=True)\n        drivetrain.turn_for(RIGHT, 135, DEGREES, wait=True)\n        drivetrain.drive_for(FORWARD, 50, INCHES, wait=True)\n\n# system event handlers\ncontroller_1.buttonX.pressed(onevent_controller_1buttonX_pressed_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n\ncompetition = Competition(driver_control, autonomous)\n","textLanguage":"python","rconfig":[{"port":[12,19,11,20,null],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel325in","gear":"ratio6_1","gearRatio":"3:2","direction":"rev","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}},{"port":[6],"name":"Cata","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[18],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"}},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Intake","leftDir":"false","right":"Cata","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"}}],"slot":5,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}