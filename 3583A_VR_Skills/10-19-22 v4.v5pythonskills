{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vrc import *\nfrom vexcode_vrc.events import get_Task_func\n  \n# constructors\n\ndrivetrain = Drivetrain()\nbrain = Brain()\nbottom_distance = Distance(\"BottomDistance\", 18)\nroller_optical = Optical(\"RollerOptical\", 2)\ngps = GPS(\"GPS\", 3)\nintake_motor_group = Motor(\"IntakeMotorGroup\", 10)\nbottom_line_tracker = LineTracker(\"BottomLineTracker\", 22)\nmiddle_line_tracker = LineTracker(\"MiddleLineTracker\", 23)\ntop_line_tracker = LineTracker(\"TopLineTracker\", 24)\n#endregion VEXcode Generated Robot Configuration\n\n\n\"\"\"\n10-19-2022 v4\nChange list:\n - made the turnToBlueHighGoal function\n - made the turnToRedHighGoal function\n - they both work for all spots not between the goal and the corner nearest to it\n - bug fixes\nWorking on\n - route\n - BUGS\n\nCurrent score: 67 pts (47s remaining)\n\"\"\"\n\nvexcode_brain_precision = 0\nunfixedHeading = 0\n\ndef turnToBlueHighGoal():\n    global vexcode_brain_precision\n    unfixedHeading = math.atan((-1330 - gps.y_position(MM)) / (-1330 - gps.x_position(MM))) / math.pi * 180\n    if gps.y_position(MM) > -1330 and gps.x_position(MM) > -1330:\n        drivetrain.turn_to_heading((-1 * unfixedHeading), DEGREES, wait=True)\n    elif gps.y_position(MM) > -1330 and gps.x_position(MM) < -1330:\n        drivetrain.turn_to_heading(-90 + (-90 - unfixedHeading), DEGREES, wait=True)\n    elif gps.y_position(MM) < -1330 and gps.x_position(MM) > -1330:\n        drivetrain.turn_to_heading(-unfixedHeading, DEGREES, wait=True)\n\ndef turnToRedHighGoal():\n    global vexcode_brain_precision\n    unfixedHeading = math.atan((1330 - gps.y_position(MM)) / (1330 - gps.x_position(MM))) / math.pi * 180\n    if gps.y_position(MM) < 1330 and gps.x_position(MM) < 1330:\n        drivetrain.turn_to_heading((180 - unfixedHeading), DEGREES, wait=True)\n    elif gps.y_position(MM) < 1330 and gps.x_position(MM) > 1330:\n        drivetrain.turn_to_heading(90 - ((unfixedHeading - 180) - 90), DEGREES, wait=True)\n    elif gps.y_position(MM) > 1330 and gps.x_position(MM) < 1330:\n        drivetrain.turn_to_heading(180 + (180 - (unfixedHeading - 180)), DEGREES, wait=True)\n\ndef when_started1():\n    global vexcode_brain_precision\n    drivetrain.set_drive_velocity(100, PERCENT)\n    intake_motor_group.set_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    \"\"\"\n    drivetrain.drive_for(FORWARD, 45, INCHES, wait=True)\n    drivetrain.turn_to_heading(-90, DEGREES, wait=True)\n    drivetrain.drive_for(FORWARD, 75, INCHES, wait=True)\n    \"\"\"\n    turnToRedHighGoal()\n    intake_motor_group.spin(REVERSE)\n    brain.screen.print(drivetrain.heading(DEGREES))\n    brain.screen.next_row()\n\ndef code():\n    drivetrain.set_drive_velocity(100, PERCENT)\n    intake_motor_group.set_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n\n    turnToBlueHighGoal()\n    intake_motor_group.spin(REVERSE)\n    wait(0.57, SECONDS)\n\n    drivetrain.turn_to_heading(25, DEGREES, wait=True)\n    drivetrain.drive_for(FORWARD, 12, INCHES, wait=False)\n    wait(0.6, SECONDS)\n    drivetrain.turn_to_heading(5, DEGREES, wait=True)\n    drivetrain.drive_for(FORWARD, 16, INCHES, wait=False)\n    wait(0.1, SECONDS)\n    intake_motor_group.stop()\n    wait(0.3, SECONDS)\n    intake_motor_group.spin(REVERSE)\n    wait(0.4, SECONDS)\n    intake_motor_group.stop()\n    turnToBlueHighGoal()\n    intake_motor_group.spin(REVERSE)\n    wait(1.4, SECONDS)\n\n    drivetrain.turn_to_heading(-100, DEGREES, wait=True)\n    drivetrain.drive_for(FORWARD, 26, INCHES, wait=True)\n    wait(0.9, SECONDS)\n    intake_motor_group.stop()\n    turnToBlueHighGoal()\n    intake_motor_group.spin(REVERSE)\n    wait(1.4, SECONDS)\n\n    drivetrain.turn_to_heading(-93, DEGREES, wait=True)\n    drivetrain.drive_for(FORWARD, 23.5, INCHES, wait=True)\n    wait(0.9, SECONDS)\n    intake_motor_group.stop()\n    turnToRedHighGoal()\n    intake_motor_group.spin(REVERSE)\n    wait(1.4, SECONDS)\n    \n    drivetrain.turn_to_heading(-130, DEGREES, wait=True)\n    drivetrain.drive_for(FORWARD, 23, INCHES, wait=True)\n\nvr_thread(code)","textLanguage":"python","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Virtual","virtualSkillsYear":"2023"}